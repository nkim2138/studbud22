{"mappings":"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","sources":["public/script.js"],"sourcesContent":["// ------------------------drag and drop ----------------------------------------\r\n//getting the class from .html\r\nconst toDoTasks = document.querySelectorAll(\".taskAssigned\");\r\nconst taskColumns = document.querySelectorAll(\".columnInfo\");\r\n// at the beginning we don't know what item will be draggable\r\nlet draggableTasks = null;\r\n\r\n// looping through other to do tasks\r\ntoDoTasks.forEach((taskAssigned) => {\r\n  taskAssigned.addEventListener(\"dragstart\", dragStart);\r\n  taskAssigned.addEventListener(\"dragend\", dragEnd);\r\n})\r\n\r\n// creating a function called dragStart\r\nfunction dragStart() {\r\n  \r\n  draggableTasks = this;\r\n  // when the task is dragged it will print dragStart in the console\r\n  console.log(\"dragStart\");\r\n}\r\n\r\nfunction dragEnd() {\r\n  // when it ends it is null\r\n  draggableTasks = null;\r\n  // when you leave the task dragEnd prints\r\n  console.log(\"dragEnd\");\r\n}\r\n\r\n//drop targets are the columns with the colour\r\ntaskColumns.forEach((columnInfo) => {\r\n  columnInfo.addEventListener(\"dragover\", dragOver);\r\n  columnInfo.addEventListener(\"dragenter\", dragEnter);\r\n  columnInfo.addEventListener(\"dragleave\", dragLeave);\r\n  columnInfo.addEventListener(\"drop\", dragDrop);\r\n})\r\n\r\nfunction dragOver(e) {\r\n  // by default dropping over an element is disabled, adding this would enable it to be draggable and dropped\r\n  e.preventDefault();\r\n  //only counts if it is dragged around the drop targets\r\n  console.log(\"dragOver\");\r\n}\r\n\r\nfunction dragEnter() {\r\n  // When it enters the drop target\r\n  console.log(\"dragEnter\");\r\n}\r\n\r\nfunction dragLeave() {\r\n  console.log(\"dragLeave\");\r\n  \r\n}\r\nfunction dragDrop() {\r\n  this.appendChild(draggableTasks);\r\n  // only fired when element is dropped on a drop target\r\n  console.log(\"drop\");\r\n  \r\n}\r\n\r\n// have the task form popup when clicked on add task\r\n// have task close when clicked on the overlay, cancel or the X button\r\nfunction togglePopupTask(){\r\n  document.getElementById(\"taskPopup\").classList.toggle(\"active\");\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ---------------TASK FORM FILL-----------------------\r\n// creating task functionality\r\n\r\n\r\n//need variables to keep track of our input elements themselves\r\n//js variables referencing html elements\r\n//const - never changing\r\n//get variable from DOM using actual 'document' object\r\nconst taskForm = document.getElementById(\"taskForm\"); //get element by ID from HTML\r\n\r\n//querySelector() general way to select elements\r\n//allows you to pass in a CSS selector as the input parameter for that function in order to get an element from HTML. these elements are relevant to creating a task\r\nconst taskNameInput = document.querySelector(\"#taskNameInput\") //# to get ID\r\nconst tasklist = document.getElementById(\"tasklist\");\r\nconst taskDescriptionInput = document.getElementById(\"taskDescriptionInput\");\r\nconst unitOfStudyInput = document.getElementById(\"unitOfStudyInput\");\r\nconst priorityInput = document.getElementById(\"priorityInput\");\r\nconst dueDateInput = document.getElementById(\"dueDateInput\");\r\nconst columnSelectInput = document.getElementById(\"columnSelectInput\");\r\nconst completionTimeInput = document.getElementById(\"completionTimeInput\");\r\nconst estimatedTimeInput = document.getElementById(\"estimatedTimeInput\");\r\n\r\n// getting the button create\r\nconst create = document.querySelectorAll(\".create\");\r\nconst tasksColumn = document.getElementById(\"tasksColumn\");\r\n\r\n\r\n//parameter 1 - event itself which is the submit\r\n//parameter 2 - what we want to happen when the element is clicked on\r\ntaskForm.addEventListener(\"submit\", function(event) { //defining and calling at the same time\r\n  \r\n  //none of the browser functionality will happen automatically when clicked\r\n  event.preventDefault();\r\n  \r\n  //get value from task input of user\r\n  let taskName = taskNameInput.value;\r\n  let taskDescription = taskDescriptionInput.value;\r\n    //array of collections\r\n  //selected index of current element\r\n  let unitOfStudy = unitOfStudyInput.options[unitOfStudyInput.selectedIndex].value;\r\n  let priority = priorityInput.value;\r\n  let dueDate = dueDateInput.value;\r\n  let columnSelect = columnSelectInput.options[unitOfStudyInput.selectedIndex].value;\r\n  let completionTime = completionTimeInput.value;\r\n  let estimatedTime = estimatedTimeInput.value;\r\n  console.log(taskListArray);\r\n\r\n  \r\n  //input bunch of parameters\r\n  addTask(taskName, taskDescription, unitOfStudy, priority, dueDate, columnSelect, completionTime, estimatedTime )\r\n})\r\n\r\n\r\n// create empty array to store tasks\r\n//globally scoped array\r\nvar taskListArray = [];\r\n\r\n//Define a function called addTask for dynamically creating task objects\r\n//will be saved in JSON\r\nfunction addTask(name, description, unitofstudy, priority, dueDate, column, completionTime, estimatedTime ) {\r\n\r\n  // > Create the task object\r\n  //local scope 'let'\r\n  let task = {\r\n   //using input parameters as property names for task object as shortcut\r\n   name,\r\n   description, //strings as our values\r\n   unitofstudy,\r\n   priority,\r\n   dueDate,\r\n   column,\r\n   completionTime,\r\n   estimatedTime,\r\n   taskStarted: false, //by default\r\n   taskCompleted: false //by default\r\n };\r\n  \r\n  //Push task object to taskList Array\r\n  taskListArray.push(task);\r\n  \r\n  //render task to screen\r\n  renderTask(task);\r\n}\r\n\r\n//create render task function\r\n//share task object with the function\r\nfunction renderTask(task){\r\n  \r\n  //create HTML structure (elements)\r\n  //create var called item\r\n  let item = document.createElement(\"li\");\r\n  item.className = \"taskBox\";\r\n  \r\n  //name from the task object\r\n  item.innerHTML = \"<p>\" + task.name + \"<p>\";\r\n  item.innerHTML = \"<p>\" + task.description + \"</p>\";\r\n\r\n  //shows only 30 characters\r\n  // task.description = task.description.substring(0, 30);\r\n\r\n  //append element to get new elements to the DOM\r\n  tasklist.appendChild(item);\r\n  item.classList.add(\"taskAssigned\");\r\n  // task created can be draggable\r\n  item.setAttribute(\"draggable\", \"true\");\r\n\r\n  //item will be placed within the columns\r\n  tasksColumn.appendChild(item);\r\n\r\n  // task created by user can be dropped in other columns\r\n  item.addEventListener(\"dragstart\", dragStart);\r\n  item.addEventListener(\"dragend\", dragEnd);\r\n\r\n  // console.log(item);\r\n\r\n  function clickCreatedTask() {\r\n    let createdTask = document.createElement(\"div\");\r\n    createdTask.setAttribute(\"id\", \"createdTask\")\r\n  }\r\n\r\n  \r\n  \r\n  //add user interactions to the elements\r\n  //extra task DOM elements - eg. deleting a task that was created by mistake\r\n  \r\n  // let delButton = document.createElement(\"button\");\r\n  // //text node\r\n  // let delButtonText = document.createTextNode(\"Delete Task\");\r\n  // delButton.appendChild(delButtonText);\r\n\r\n  \r\n  //delete button to appear on screen after a task is created\r\n  // item.appendChild(delButton);\r\n\r\n  //Event listeners for the DOM elements\r\n  //task will be deleted when 'delete' button is clicked\r\n  //button will always correspond to the item that they are next to\r\n  // delButton.addEventListener(\"click\", function(event){\r\n  //   event.preventDefault();\r\n  //   item.remove(); //delete/remove item from the DOM\r\n  // })\r\n\r\n //Once the form is submitted the form is cleared\r\n  taskForm.reset();\r\n}"],"names":[],"version":3,"file":"index.f3bd186e.js.map","sourceRoot":"/__parcel_source_root/"}